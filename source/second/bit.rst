位运算符
============================================
二进制及位运算(Bit Operation)概述
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
现代计算机中所有数据都以 `二进制`_ 的形式存储在设备中。即 0、1 两种状态，计算机对二进制数据进行的运算(+、-、/)等都叫位运算，合理的运用位运算能显著提高代码在机器上的执行效率。

.. _二进制: https: //www.shuxuele.com/binary-number-system.html

位运算符(Bit Operator)概览
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. list-table:: 位运算符(基于二进制)
    :widths: 15 10 30
    :header-rows: 1

    * - 符号
      - 名称
      - 结果
    * - $a & $b
      - 按位与(And)
      - 全1出1，否则出0
    * - $a | $b
      - 按位或(Or)
      - 有1出1，否则出0
    * - $a ^ $b
      - 按位异或(Xor)
      - 相反出1，相同出0
    * - ~ $a
      - 按位取反(Not)
      - 由0变1，由1变0
    * - $a << $b
      - 左移(Shift left)
      - $a左移$b位
    * - $a >> $b
      - 右移(Shift right)
      - $a右移$b位
  
位运算符具体介绍
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1. 按位与(And)
参与运算的两数各对应的二进位相与，当对应的两个二进位均为1时结果位为1，否则为0(全1出1)
如图：376 & 77

.. image:: ..\media\Bit\And.png
    :align: center
    :alt: 按位与(And)

2. 按位或(Or)
参与运算的两数各对应的二进位相或，当对应的两个二进位有一个为1时结果位就为1，否则为0。(有1出1)
如图：262 | 136

.. image:: ../media/Bit/Or.png
   :align: center
   :alt: 按位或(Or)

3. 按位异或(Xor)
参与运算的两数各对应的二进位相异或，当两对应的二进位相异(不相同)时结果为1(相反出1，相同出0)
如图：24 ^ 5

.. image:: ../media/Bit/Xor.png
   :align: center
   :alt: 按位异或(Xor)

4. 按位取反(Not)
其功能是对参与运算的数的各二进位按位求反(由0变1，由1变0)
如图：~ 15

.. image:: ../media/Bit/Not.png
   :align: center
   :alt: 按位取反(Not)

5. 左移(Shift left)
把“<< ”左边的运算数的各二进位全部左移若干位，由“<<”右边的数指定移动的位数，高位丢弃，低位补0
如图： 377 << 1

.. image:: ../media/Bit/Shitf Left.png
   :align: center
   :alt: 左移(Shift left)

6. 右移(Shift right)
把“>> ”左边的运算数的各二进位全部右移若干位，“>>”右边的数指定移动的位数。对于有符号数，在右移时，符号位将随同移动。当为正数时，最高位补0，而为负数时，符号位为1，最高位是补0或是补1取决于编译系统的规定
如图：377 >> 1

.. image:: ../media/Bit/Shitf Right.png
   :align: center
   :alt: 右移(Shift right)

注意事项
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1. 使用运算符时应当 **考虑运算符优先级** ，必要时引用括号确保想要的优先级。如 $x & $y == false 先比较再按位与；而 ($x & $y) == false 则先按位与再比较。
在一个表达式中可能包含多个有不同运算符连接起来的、具有不同数据类型的数据对象；由于表达式有多种运算，不同的运算顺序可能得出不同结果甚至出现运算错误，因为当表达式中含多种运算时，必须按一定顺序进行结合，才能保证运算的合理性和结果的正确性、唯一性。
详情见 `运算符优先级`_ .

.. _运算符优先级: https://www.php.net/manual/zh/language.operators.precedence.php

2. 位移在 PHP 中是数学运算。向任何方向移出去的位都被丢弃。 **左移** 时右侧 *以零填充* ，符号位被移走意味着正负号不被保留。 **右移** 时左侧 *以符号位* 填充，意味着正负号被保留。